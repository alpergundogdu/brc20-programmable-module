# Block size of 4MB allows around 10k calls per block for BTC tx details, assuming each call is around 512 bytes
# This is a very rough, potentially worst-case estimate, and the actual number of calls per block will vary.

# The performance test script is a simple script that calls the btc tx details contract 10k times.

# The script is run with the following command:
# python3 performance_test_single_block_btc_tx_details.py

import json
import sys
import time
from brc20_prog.brc20_prog_client import BRC20ProgClient

# Initialize the BRC20ProgClient
client = BRC20ProgClient()

deploy_data = open("contracts/brc20_prog_helper/BRC20_Prog_deploy_tx.json").read()
deploy_data = json.loads(deploy_data)["d"]

tx_data_precompiles = [
    ("Random Number (Contract only)", "", "0xdbdff2c1", "0x000000000000000000000000000000000000000000000000000000000000002a"),
    (
        "Sha256 (Built-in Precompile at 0x02)",
        "",
        "0x4dfb0d820000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000",
        "0xa591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e",
    ),
    (
        "BIP322 (Custom Precompile at 0xFE)",
        "0x00000000000000000000000000000000000000fe",
        "0xff96254b000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000002a6263317139767a61326538783537336e637a726c7a6d7330777678336773716a7837766176676b78306c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090416b677752514968414f7a79796e6c717439336c4f4b4a722b776d6d7849656e732f2f7a507a6c397471494f75613933774f364d41694269356e35457941635053634f6a66316c4171495549517472337a4b4e656176596162487952386547686f7745684173667849414d5a5a454b5550595749344272756841516a7a46543846534653616a75467772444c3159687900000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000001",
    ),
    (
        "Locked PkScript (Custom Precompile at 0xFB)",
        "0x00000000000000000000000000000000000000fb",
        "0x08130e9900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000003e746231706c6e77393537376b6464786e34727933377873756c3939643034747037773373663063636c74366b307a633775336c3873776d733776667034380000",
        "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003e7462317030356136663939757a63676b756167346478393677363663707337723978396b6664746b303530797939387133367864367666717975717164730000",
    ),
    (
        "BRC20 Balance (Custom Precompile at 0xFF)",
        "0x00000000000000000000000000000000000000ff",
        "0x93cd7d94000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004626c656800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a6263317139767a61326538783537336e637a726c7a6d7330777678336773716a7837766176676b78306c00000000000000000000000000000000000000000000",
        "0x000000000000000000000000000000000000000000000000000000000000001a",
    ),
    (
        "BTC Last Sat Location (Custom Precompile at 0xFC)",
        "0x00000000000000000000000000000000000000fc",
        "0x0d4edd80000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000004064303964323637353264306133336431626462303231336366333638313936333564313235386137653466636265363639653132626337646162386365636464",
        "0x00000000000000000000000000000000000000000000000000000000000000ac30303134663437373935326633333536316331623839613166653966323836383266363233323633653135390000000000000000000000000000000000000000",
    ),
    (
        "BTC Tx Details (Custom Precompile at 0xFD)",
        "0x00000000000000000000000000000000000000fd",
        "0x96327323000000000000000000000000000000000000000000000000000000000000004034313833666237333362393535336361386239333230386339316464613138626565336430623835313037323062313564373664393739616637666439393236",
        "0x000000000000000000000000000000000000000000000000000000000001870b00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000008c000000000000000000000000000000000000000000000000000000000000009a00000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002ac0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000004435313230353137343439386635393430313138343631623466333030366537356466633066663134306166666663396163396232393337373931613164633364313764300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000443531323035313734343938663539343031313834363162346633303036653735646663306666313430616666666339616339623239333737393161316463336431376430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044353132303531373434393866353934303131383436316234663330303665373564666330666631343061666666633961633962323933373739316131646333643137643000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004435313230353137343439386635393430313138343631623466333030366537356466633066663134306166666663396163396232393337373931613164633364313764300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000443531323035313734343938663539343031313834363162346633303036653735646663306666313430616666666339616339623239333737393161316463336431376430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044353132303531373434393866353934303131383436316234663330303665373564666330666631343061666666633961633962323933373739316131646333643137643000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000cb000000000000000000000000000000000000000000000000000000000000024f5",
    ),
]

btc_pkscript = "7465737420706b736372697074"  # "test pkscript"

block_hash = "0x" + "0" * 64
timestamp = int(time.time())

client.clear_caches()

# deploy first
contract_address = client.add_tx_to_block(
    from_pkscript=btc_pkscript,
    contract_address=None,
    data=deploy_data,
    timestamp=timestamp,
    block_hash=block_hash,
)[0]

failed_tests = []

print("Deployed contract with address: " + contract_address)

for i in range(len(tx_data_precompiles)):
    print("Testing " + tx_data_precompiles[i][0])
    if tx_data_precompiles[i][1] != "":
        print("Directly accessing the precompile at address: " + tx_data_precompiles[i][1])
        result = client.add_tx_to_block(
            from_pkscript=btc_pkscript,
            contract_address=tx_data_precompiles[i][1],
            data=tx_data_precompiles[i][2],
            timestamp=timestamp,
            block_hash=block_hash,
        )
        if result[1] == False or result[2] != tx_data_precompiles[i][3]:
            print("Direct call for " + tx_data_precompiles[i][0] + " failed")
            failed_tests.append("Direct - " + tx_data_precompiles[i][0])

    result = client.add_tx_to_block(
        from_pkscript=btc_pkscript,
        contract_address=contract_address,
        data=tx_data_precompiles[i][2],
        timestamp=timestamp,
        block_hash=block_hash,
    )
    if result[1] == False or result[2] != tx_data_precompiles[i][3]:
        print("Proxy call for " + tx_data_precompiles[i][0] + " failed")
        failed_tests.append("Proxy - " + tx_data_precompiles[i][0])

client.finalise_block(block_hash=block_hash, timestamp=timestamp)

print("Test complete\n")
for test in failed_tests:
    print("Failed test: " + test)
